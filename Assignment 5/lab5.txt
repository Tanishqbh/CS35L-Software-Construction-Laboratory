Raymond Lin
304937942
Lab 2 

Lab: Buffered Vs. Unbuffered I/O
Constructed two programs: tr2b and tr2u
Brief description of program:
1. check if correct number of arguments - 3. Throw an error if not.
2. check if arguments are the same length. Throw an error if not.
3. check if argument 1 has repeating character. Throw an error if they do.
4. read character using the respective method (read or getchar)
5. Loop through the characters of argument 1 to see if they match the read character
6. if they match, write the corresponding character of argument 2 to stdout. if they do not match, write the read character to stdout
7. repeat step 4-6 until EOF 

tr2b
-uses getchar() and putchar() in order to read and write from stdin and stdout respectively
-putchar() and getchar() are library functions - well optimized
tr2u
-uses read() and write() in order to read and write from stdin and stdout respectively
-read() and write() are system Calls - expensive to call

Commands:
	gcc -o tr2b -g tr2b.c
	gcc -o tr2u -g tr2u.c
		-compiles both programs
	dd if=/dev/urandom of=file.txt count=5 bs=1048576
		-creates a random file called 'file.txt' that is at least 5 MB large
		-we will use this to test both programs
	strace -c ./tr2b abc 123 < file.txt > btofile
		-trace the system calls in tr2b when it copies the translation to a file
		-output: 
		% time     seconds  usecs/call     calls    errors syscall
		------ ----------- ----------- --------- --------- ----------------
		 30.60    0.000056           6         9           mmap
		 18.58    0.000034          34         1           execve
		 17.49    0.000032          32         1           brk
		  9.84    0.000018           9         2           open
		  6.01    0.000011           3         4           mprotect
		  4.37    0.000008           2         4           fstat
		  4.37    0.000008           8         1         1 access
		  3.83    0.000007           4         2           close
		  2.73    0.000005           3         2           read
		  2.19    0.000004           4         1           arch_prctl
		  0.00    0.000000           0         1           write
		  0.00    0.000000           0         1           munmap
		------ ----------- ----------- --------- --------- ----------------
		100.00    0.000183                    29         1 total

	strace -c ./tr2b abc 123 < file.txt
		-trace the system calls in tr2b when it prints to the terminal
		-output:
		% time     seconds  usecs/call     calls    errors syscall
		------ ----------- ----------- --------- --------- ----------------
		 25.77    0.000042           5         9           mmap
		 15.95    0.000026           7         4           mprotect
		 13.50    0.000022           6         4           fstat
		 12.88    0.000021          11         2           write
		 12.27    0.000020          10         2           open
		  7.36    0.000012           6         2           read
		  6.13    0.000010          10         1           munmap
		  3.68    0.000006           3         2           close
		  2.45    0.000004           4         1           arch_prctl
		  0.00    0.000000           0         1           brk
		  0.00    0.000000           0         1         1 access
		  0.00    0.000000           0         1           execve
		------ ----------- ----------- --------- --------- ----------------
		100.00    0.000163                    30         1 total

	strace -c ./tr2u abc 123 < file.txt > btofile
		-trace the system calls in tr2u when it copies the translation to another file
		-output:
		% time     seconds  usecs/call     calls    errors syscall
		------ ----------- ----------- --------- --------- ----------------
		 56.11   21.273959           4   5242881           write
		 43.89   16.640964           3   5242882           read
		  0.00    0.000055           8         7           mmap
		  0.00    0.000045          45         1           brk
		  0.00    0.000043          43         1           execve
		  0.00    0.000031           8         4           mprotect
		  0.00    0.000017           9         2           open
		  0.00    0.000012          12         1         1 access
		  0.00    0.000011          11         1           munmap
		  0.00    0.000007           4         2           close
		  0.00    0.000006           3         2           fstat
		  0.00    0.000004           4         1           arch_prctl
		------ ----------- ----------- --------- --------- ----------------
		100.00   37.915154              10485785         1 total

	strace -c ./tr2u abc 123 < file.txt
		-trace the system calls in tr2u when it prints to the terminal
		-output:
		% time     seconds  usecs/call     calls    errors syscall
		------ ----------- ----------- --------- --------- ----------------
		 57.26   23.335215           4   5242881           write
		 42.74   17.420244           3   5242882           read
		  0.00    0.000046           7         7           mmap
		  0.00    0.000044          44         1           execve
		  0.00    0.000028           7         4           mprotect
		  0.00    0.000019          10         2           open
		  0.00    0.000018          18         1         1 access
		  0.00    0.000010          10         1           munmap
		  0.00    0.000007           4         2           fstat
		  0.00    0.000006           3         2           close
		  0.00    0.000006           6         1           brk
		  0.00    0.000003           3         1           arch_prctl
		------ ----------- ----------- --------- --------- ----------------
		100.00   40.755646              10485785         1 total

		-analyzing all the 'strace' outputs, we can see that the tr2u version uses many more system calls than tr2b
		-for printing to the terminal and copying to another file, tr2u uses 10485785 system calls
		-for printing to the terminal and copying to another file, tr2b uses 29 and 30 system calls respectively
		-we can infer that using getchar, putchar, and other library functions, is much more efficient than using system calls in our code

	time ./tr2u abc 123 < file.txt
		-prints out time information about the tr2u program
		-output:
		real 0m9.129s
		user 0m1.386s
		sys 0m7.484s

	time ./tr2b abc 123 < file.txt
		-prints out time information about the tr2b program
		-output:
		real 0m0.002s
		user 0m0.001s
		sys 0m0.000s

		-analyzing the time information from tr2b and tr2u, we can conclude that tr2b is much faster than tr2u
		-tr2b spends 0.002 seconds, while tr2u spends 9.129 seconds - a difference of 9.127 seconds
		-tr2b spends 0.001 seconds in user mode, while tr2u spends 1.386 seconds in user mode - a difference of 1.385
		-tr2b spends less than 0.001 seconds in kernel mode, while tr2u spends 7.484 seconds in kernel mode - difference of around 7.484 seconds 




